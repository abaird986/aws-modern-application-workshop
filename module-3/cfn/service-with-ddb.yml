AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet,
             but accessible via a public load balancer.

# The parameters listed below can be overrided by providing parameters during
# stack creation or update time. However, if instructions are followed exactly,
# the default parameters will be sufficient.
Parameters:
  CoreStackName:
    Type: String
    Default: MythicalMysfitsCoreStack
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port the container service will be listening on.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

Resources:

  # An ECS cluster that defines an instance grouping where tasks can be
  # scheduled during deployment. Since we are using Fargate for Mythical Mysfits,
  # we do not need to specify any specific instance configurations, just the
  # cluster itself.
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MythicalMysfits-Cluster

 # A CloudWatch logs group where the logs generated by our service containers
 # will be pushed to. Log groups are especially important when using AWS Fargate
 # because the server infrastructure is managed for you and not accessible. So
 # logs will only be available if they are being pushed to an external place
 # like CloudWatch
  MythicalMysfitsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: mythicalmysfits-logs
      RetentionInDays: 14

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: mythiaclmysfitsservice
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'CoreStackName', 'EcsServiceRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'CoreStackName', 'ECSTaskRole']]
      ContainerDefinitions:
        - Name: MythicalMysfits-Service
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mythicalmysfits/service:latest
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              Protocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: mythicalmysfits-logs
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: awslogs-mythicalmysfits-service
          Essential: True

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: MythicalMysfits-Service
      Cluster: !Ref 'EcsCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'CoreStackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'CoreStackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'CoreStackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: MythicalMysfits-Service
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      TargetType: ip
      Name: MythicalMysfits-Service
      Port: !Ref ContainerPort
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'CoreStackName', 'VPCId']]

  # Open the public load balancer we created int he CoreStack on port 80.
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'CoreStackName', 'PublicLoadBalancer']]
      Port: 80
      Protocol: TCP

  # Create a DynamoDB table to store all of the Mysfits and their attributes.
  # The primary index will be a simple HASH key on the Id of the Mysfit. Two
  # other indexes are created to allow us to query on additional attributes that
  # are used as filter parameters on the Mysfits website page.  None of the
  # other attributes that are used for the mysfits need be defined here in the
  # table definiton. DynamoDB, as a NoSQL database, gives you the flexibility to
  # structure the table items as you wish when they are being put into the
  # table. The only attributes that must be defined here during table creation
  # time are those that will be used as part of any of the defined indexes.
  MysfitsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "MysfitsTable"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        -
          AttributeName: "MysfitId"
          AttributeType: "S"
        -
          AttributeName: "Alignment"
          AttributeType: "S"
        -
          AttributeName: "Species"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "MysfitId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "SpeciesIndex"
          KeySchema:
            -
              AttributeName: "Species"
              KeyType: "HASH"
            -
              AttributeName: "MysfitId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        -
          IndexName: "AlignmentIndex"
          KeySchema:
            -
              AttributeName: "Alignment"
              KeyType: "HASH"
            -
              AttributeName: "MysfitId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5


Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'EcsCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]

  ServiceName:
    Description: The name of the ECS cluster
    Value: !Ref 'Service'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ServiceName' ] ]
